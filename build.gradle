plugins {
    id 'java'
    id 'org.springframework.boot' version '2.3.2.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'io.freefair.lombok' version '5.1.0'
    id 'org.unbroken-dome.test-sets' version '3.0.1'
    id 'jacoco'
    id "org.sonarqube" version "3.0"
}

group 'com.vitech'
version '1.0-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

testSets {
    integrationTest
}

tasks.withType(Test) {
    useJUnitPlatform()
}

def checkTestsExecutionTime = { TestDescriptor descriptor, TestResult result, String timeLimitProperty ->
    if (descriptor.parent == null) {
        def limitMinutes = project.findProperty(timeLimitProperty) as Integer
        def limitMs = limitMinutes * 60 * 1000
        def execTimeMs = result.endTime - result.startTime
        if (execTimeMs > limitMs) {
            throw new GradleException("Tests execution time [${execTimeMs}ms] exceeded configured limit [${limitMs}ms]")
        }
    }
}

test {
    afterSuite { desc, res -> checkTestsExecutionTime(desc, res, "tests.small.execution.time.limit.minutes") }
    finalizedBy jacocoTestReport
}

integrationTest {
    afterSuite { desc, res -> checkTestsExecutionTime(desc, res, "tests.medium.execution.time.limit.minutes") }
    finalizedBy jacocoIntegrationTestReport
}

tasks.withType(JacocoReport) {
    reports {
        html.enabled = true
        xml.enabled true
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.liquibase:liquibase-core:4.0.0'
    implementation 'com.google.guava:guava:29.0-jre'
    implementation 'org.modelmapper:modelmapper:2.3.8'
    runtimeOnly 'mysql:mysql-connector-java'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.testcontainers:mysql:1.14.3"
}
